package com.tb.entity;
// Generated Jan 10, 2020 9:34:01 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Film generated by hbm2java
 */
@Entity
@Table(name = "film",
        catalog = "db_tboopl_20191"
)
public class Film implements java.io.Serializable {

    @Override
    public String toString() {
        return title + " | Duration: " + duration + " minutes";
    }

    private Integer id;
    private AgeRating ageRating;
    private String title;
    private Date releaseDate;
    private int duration;
    private String synopsis;
    private String director;
    private String writer;
    private Set<Genre> genres = new HashSet<Genre>(0);
    private Set<Screening> screenings = new HashSet<Screening>(0);

    public Film() {
    }

    public Film(AgeRating ageRating, String title, Date releaseDate, int duration, String synopsis, String director, String writer) {
        this.ageRating = ageRating;
        this.title = title;
        this.releaseDate = releaseDate;
        this.duration = duration;
        this.synopsis = synopsis;
        this.director = director;
        this.writer = writer;
    }

    public Film(AgeRating ageRating, String title, Date releaseDate, int duration, String synopsis, String director, String writer, Set<Genre> genres, Set<Screening> screenings) {
        this.ageRating = ageRating;
        this.title = title;
        this.releaseDate = releaseDate;
        this.duration = duration;
        this.synopsis = synopsis;
        this.director = director;
        this.writer = writer;
        this.genres = genres;
        this.screenings = screenings;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "age_rating_id", nullable = false)
    public AgeRating getAgeRating() {
        return this.ageRating;
    }

    public void setAgeRating(AgeRating ageRating) {
        this.ageRating = ageRating;
    }

    @Column(name = "title", nullable = false, length = 45)
    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "release_date", nullable = false, length = 10)
    public Date getReleaseDate() {
        return this.releaseDate;
    }

    public void setReleaseDate(Date releaseDate) {
        this.releaseDate = releaseDate;
    }

    @Column(name = "duration", nullable = false)
    public int getDuration() {
        return this.duration;
    }

    public void setDuration(int duration) {
        this.duration = duration;
    }

    @Column(name = "synopsis", nullable = false, length = 45)
    public String getSynopsis() {
        return this.synopsis;
    }

    public void setSynopsis(String synopsis) {
        this.synopsis = synopsis;
    }

    @Column(name = "director", nullable = false, length = 200)
    public String getDirector() {
        return this.director;
    }

    public void setDirector(String director) {
        this.director = director;
    }

    @Column(name = "writer", nullable = false, length = 200)
    public String getWriter() {
        return this.writer;
    }

    public void setWriter(String writer) {
        this.writer = writer;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "tags", catalog = "db_tboopl_20191", joinColumns = {
        @JoinColumn(name = "film_id", nullable = false, updatable = false)}, inverseJoinColumns = {
        @JoinColumn(name = "genre_id", nullable = false, updatable = false)})
    public Set<Genre> getGenres() {
        return this.genres;
    }

    public void setGenres(Set<Genre> genres) {
        this.genres = genres;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "film")
    public Set<Screening> getScreenings() {
        return this.screenings;
    }

    public void setScreenings(Set<Screening> screenings) {
        this.screenings = screenings;
    }

}
